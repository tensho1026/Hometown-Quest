"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { List, Clock, CheckCircle, Star } from 'lucide-react'

interface QuestListProps {
  onQuestSelect: (quest: any) => void
  onViewChange: (view: "quest") => void
}

export function QuestList({ onQuestSelect, onViewChange }: QuestListProps) {
  const activeQuests = [
    {
      id: 1,
      title: "15ÂàÜ„ÅäÊï£Ê≠©",
      type: "ÈÅãÂãï",
      points: 30,
      difficulty: "Á∞°Âçò",
      duration: "15ÂàÜ",
      description: "ËøëÊâÄ„Çí15ÂàÜÈñì„ÅäÊï£Ê≠©„Åó„Å¶„ÄÅ„É™„Éï„É¨„ÉÉ„Ç∑„É•„Åó„Çà„ÅÜ",
      icon: "üö∂‚Äç‚ôÄÔ∏è",
      category: "daily",
      progress: 0,
    },
    {
      id: 2,
      title: "Âú∞ÂÖÉ„Åß„ÅäË≤∑„ÅÑÁâ©",
      type: "ÁîüÊ¥ª",
      points: 50,
      difficulty: "Á∞°Âçò",
      duration: "30ÂàÜ",
      description: "Âú∞ÂÖÉ„ÅÆ„ÅäÂ∫ó„Åß‰Ωï„Åã‰∏Ä„Å§„ÅäË≤∑„ÅÑÁâ©„Çí„Åó„Çà„ÅÜ",
      icon: "üõí",
      category: "shopping",
      progress: 0,
    },
    {
      id: 3,
      title: "Êú¨„Çí10„Éö„Éº„Ç∏Ë™≠„ÇÄ",
      type: "Â≠¶Áøí",
      points: 40,
      difficulty: "Á∞°Âçò",
      duration: "20ÂàÜ",
      description: "Â•Ω„Åç„Å™Êú¨„Çí10„Éö„Éº„Ç∏Ë™≠„Çì„Åß„Åø„Çà„ÅÜ",
      icon: "üìö",
      category: "learning",
      progress: 0,
    },
    {
      id: 4,
      title: "Âú∞ÂÖÉ„ÅÆÊñ∞„Åó„ÅÑ„ÅäÂ∫ó„ÇíÁô∫Ë¶ã",
      type: "Êé¢Á¥¢",
      points: 100,
      difficulty: "ÊôÆÈÄö",
      duration: "1ÊôÇÈñì",
      description: "„Åæ„Å†Ë°å„Å£„Åü„Åì„Å®„ÅÆ„Å™„ÅÑÂú∞ÂÖÉ„ÅÆ„ÅäÂ∫ó„ÇíË¶ã„Å§„Åë„Å¶Ë®™„Çå„Å¶„Åø„Çà„ÅÜ",
      icon: "üè™",
      category: "exploration",
      progress: 0,
    },
    {
      id: 5,
      title: "Âú∞ÂÖÉ„ÅÆÂÜôÁúü„Çí3ÊûöÊíÆ„Çã",
      type: "Ë®òÈå≤",
      points: 80,
      difficulty: "ÊôÆÈÄö",
      duration: "45ÂàÜ",
      description: "Âú∞ÂÖÉ„ÅÆÁ¥†Êïµ„Å™È¢®ÊôØ„ÇÑÂª∫Áâ©„Çí3ÊûöÊíÆÂΩ±„Åó„Çà„ÅÜ",
      icon: "üì∏",
      category: "photo",
      progress: 0,
    },
  ]

  const completedQuests = [
    {
      id: 101,
      title: "Êúù„ÅÆÊï£Ê≠©",
      type: "ÈÅãÂãï",
      points: 30,
      difficulty: "Á∞°Âçò",
      duration: "15ÂàÜ",
      description: "Êúù„ÅÆÊñ∞ÈÆÆ„Å™Á©∫Ê∞ó„ÇíÂê∏„ÅÑ„Å™„Åå„ÇâÊï£Ê≠©„Åó„Åæ„Åó„Åü",
      icon: "üåÖ",
      category: "daily",
      completedDate: "2024-03-15",
    },
    {
      id: 102,
      title: "Âú∞ÂÖÉ„Ç´„Éï„Çß„Åß„Ç≥„Éº„Éí„Éº",
      type: "ÁîüÊ¥ª",
      points: 50,
      difficulty: "Á∞°Âçò",
      duration: "30ÂàÜ",
      description: "Âú∞ÂÖÉ„ÅÆ„Ç´„Éï„Çß„ÅßÁæéÂë≥„Åó„ÅÑ„Ç≥„Éº„Éí„Éº„ÇíÊ•Ω„Åó„Åø„Åæ„Åó„Åü",
      icon: "‚òï",
      category: "shopping",
      completedDate: "2024-03-14",
    },
    {
      id: 103,
      title: "ÂÖ¨Âúí„ÅÆ„Éô„É≥„ÉÅ„ÅßË™≠Êõ∏",
      type: "Â≠¶Áøí",
      points: 40,
      difficulty: "Á∞°Âçò",
      duration: "25ÂàÜ",
      description: "ÂÖ¨Âúí„ÅÆ„Éô„É≥„ÉÅ„ÅßÂ∞èË™¨„ÇíË™≠„Åø„Åæ„Åó„Åü",
      icon: "üìñ",
      category: "learning",
      completedDate: "2024-03-13",
    },
    {
      id: 104,
      title: "ÂïÜÂ∫óË°ó„ÅÆËÄÅËàóÁô∫Ë¶ã",
      type: "Êé¢Á¥¢",
      points: 100,
      difficulty: "ÊôÆÈÄö",
      duration: "1ÊôÇÈñì",
      description: "50Âπ¥Á∂ö„ÅèËÄÅËàó„ÅÆÂíåËèìÂ≠êÂ±ã„Åï„Çì„ÇíÁô∫Ë¶ã„Åó„Åæ„Åó„Åü",
      icon: "üç°",
      category: "exploration",
      completedDate: "2024-03-12",
    },
  ]

  const handleQuestClick = (quest: any) => {
    onQuestSelect(quest)
    onViewChange("quest")
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case "Á∞°Âçò":
        return "bg-green-100 text-green-700"
      case "ÊôÆÈÄö":
        return "bg-yellow-100 text-yellow-700"
      case "Èõ£„Åó„ÅÑ":
        return "bg-red-100 text-red-700"
      default:
        return "bg-gray-100 text-gray-700"
    }
  }

  return (
    <div className="flex flex-col h-screen bg-gradient-to-b from-amber-50 to-orange-50">
      {/* Header */}
      <div className="bg-gradient-to-r from-amber-600 to-orange-600 text-white p-4 shadow-lg">
        <div className="flex items-center gap-3">
          <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
            <List className="w-6 h-6" />
          </div>
          <div>
            <h1 className="font-bold text-lg">„ÇØ„Ç®„Çπ„Éà‰∏ÄË¶ß</h1>
            <p className="text-sm opacity-90">„ÅÇ„Å™„Åü„ÅÆÂÜíÈô∫„ÇíÁÆ°ÁêÜ„Åó„Çà„ÅÜ</p>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-4 overflow-y-auto pb-20">
        <Card className="border-2 border-amber-200 shadow-xl bg-white/95 backdrop-blur-sm">
          <Tabs defaultValue="active" className="w-full">
            <TabsList className="grid w-full grid-cols-2 bg-amber-100">
              <TabsTrigger value="active" className="data-[state=active]:bg-amber-500 data-[state=active]:text-white">
                ÈÄ≤Ë°å‰∏≠„ÅÆ„ÇØ„Ç®„Çπ„Éà
              </TabsTrigger>
              <TabsTrigger value="completed" className="data-[state=active]:bg-amber-500 data-[state=active]:text-white">
                ÈÅîÊàêÊ∏à„Åø„ÇØ„Ç®„Çπ„Éà
              </TabsTrigger>
            </TabsList>

            <TabsContent value="active" className="p-4">
              <div className="space-y-4">
                {activeQuests.map((quest) => (
                  <Card
                    key={quest.id}
                    className="border border-amber-200 shadow-md bg-white cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-[1.02]"
                    onClick={() => handleQuestClick(quest)}
                  >
                    <div className="p-4">
                      <div className="flex items-start gap-3">
                        <div className="w-12 h-12 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full flex items-center justify-center text-2xl flex-shrink-0">
                          {quest.icon}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-2">
                            <h3 className="font-bold text-gray-800 truncate">{quest.title}</h3>
                            <Badge variant="outline" className="border-amber-400 text-amber-700 text-xs flex-shrink-0">
                              {quest.type}
                            </Badge>
                          </div>
                          <p className="text-sm text-gray-600 mb-3 line-clamp-2">{quest.description}</p>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-4 text-xs text-gray-500">
                              <span className="flex items-center gap-1">
                                <Clock className="w-3 h-3" />
                                {quest.duration}
                              </span>
                              <Badge className={`text-xs ${getDifficultyColor(quest.difficulty)}`}>
                                {quest.difficulty}
                              </Badge>
                            </div>
                            <div className="flex items-center gap-1">
                              <Star className="w-4 h-4 text-amber-500" />
                              <span className="font-bold text-amber-600">{quest.points}pt</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="completed" className="p-4">
              <div className="space-y-4">
                {completedQuests.map((quest) => (
                  <Card
                    key={quest.id}
                    className="border border-green-200 shadow-md bg-green-50/50 cursor-pointer hover:shadow-lg transition-all duration-200"
                    onClick={() => handleQuestClick(quest)}
                  >
                    <div className="p-4">
                      <div className="flex items-start gap-3">
                        <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-teal-500 rounded-full flex items-center justify-center text-2xl flex-shrink-0 relative">
                          {quest.icon}
                          <div className="absolute -top-1 -right-1 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                            <CheckCircle className="w-4 h-4 text-white" />
                          </div>
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-2">
                            <h3 className="font-bold text-gray-800 truncate">{quest.title}</h3>
                            <Badge variant="outline" className="border-green-400 text-green-700 text-xs flex-shrink-0">
                              {quest.type}
                            </Badge>
                            <Badge className="bg-green-500 text-white text-xs flex-shrink-0">ÂÆå‰∫Ü</Badge>
                          </div>
                          <p className="text-sm text-gray-600 mb-3 line-clamp-2">{quest.description}</p>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-4 text-xs text-gray-500">
                              <span className="flex items-center gap-1">
                                <Clock className="w-3 h-3" />
                                {quest.completedDate}
                              </span>
                              <Badge className={`text-xs ${getDifficultyColor(quest.difficulty)}`}>
                                {quest.difficulty}
                              </Badge>
                            </div>
                            <div className="flex items-center gap-1">
                              <Star className="w-4 h-4 text-green-500" />
                              <span className="font-bold text-green-600">+{quest.points}pt</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </Card>
      </div>
    </div>
  )
}
